{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Desktop/crypto/midwit/midwit-app/src/App.js\";\nimport contractAbi from './utils/contractABI.json';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nconst tld = '.sexy';\nconst CONTRACT_ADDRESS = '0x2aB26C7664e64211a325b56C19FEE91e0d4e0001';\nexport default function App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [domain, setDomain] = useState('');\n  const [record, setRecord] = useState('');\n  const TWITTER_HANDLE = 'matt_brc';\n  const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // Implement your connectWallet method here\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      } // Fancy method to request access to account.\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // Boom! This should print out public address once we authorize Metamask.\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Gotta make sure this is async.\n\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // Check if we're authorized to access the user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); // Users can have multiple authorized accounts, we grab the first one if its there!\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account);\n    } else {\n      console.log('No authorized account found');\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    } // Alert the user if the domain is too short\n\n\n    if (domain.length < 0) {\n      alert('Domain must be at least 3 characters long');\n      return;\n    } // Calculate price based on length of domain (change this to match your contract)\t\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\n\n    const price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n    console.log(\"Minting domain\", domain, \"with price\", price);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        }); // Wait for the transaction to be mined\n\n        const receipt = await tx.wait(); // Check if the transaction was successfully completed\n\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash); // Set the record for the domain\n\n          tx = await contract.setRecord(domain, record);\n          await tx.wait();\n          console.log(\"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n          setRecord('');\n          setDomain('');\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"connect-wallet-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://media.giphy.com/media/l4Jz3a8jO92crUlWM/giphy.gif\",\n    alt: \"salt gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }\n  }, \"Connect Wallet\")); // Form to enter domain name and data\n\n\n  const renderInputForm = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"first-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: score,\n      placeholder: \"domain\",\n      onChange: e => setDomain(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"tld\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 6\n      }\n    }, \" \", tld, \" \")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: domain,\n      placeholder: \"whats ur ninja power\",\n      onChange: e => setRecord(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button mint-button\",\n      onClick: mintDomain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 6\n      }\n    }, \"Mint\")));\n  };\n\n  const renderQuizForm = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 4\n      }\n    }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"score-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 6\n      }\n    }, \"You scored \", score / questions.length * 100, \"%\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 8\n      }\n    }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleAnswerButtonClick(answerOption.isCorrect),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, answerOption.answerText)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button mint-button\",\n      onClick: mintDomain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 6\n      }\n    }, \"Mint\")));\n  }; // This runs our function when the page loads.\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  const questions = [{\n    questionText: 'A TV is made to ___ to you?',\n    answerOptions: [{\n      answerText: 'talk',\n      isCorrect: false\n    }, {\n      answerText: 'befriend',\n      isCorrect: false\n    }, {\n      answerText: 'entertain',\n      isCorrect: true\n    }, {\n      answerText: 'fall in love with',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'What is the color yellow?',\n    answerOptions: [{\n      answerText: 'Yellow',\n      isCorrect: true\n    }, {\n      answerText: 'Duck',\n      isCorrect: false\n    }, {\n      answerText: 'Apple',\n      isCorrect: false\n    }, {\n      answerText: 'Blue',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'What is 2 x 2 + 2?',\n    answerOptions: [{\n      answerText: 'Elephant',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: true\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Do you know where you live?',\n    answerOptions: [{\n      answerText: 'Yes',\n      isCorrect: true\n    }, {\n      answerText: 'No',\n      isCorrect: false\n    }, {\n      answerText: 'I play football',\n      isCorrect: false\n    }, {\n      answerText: 'Unicorns exist',\n      isCorrect: false\n    }]\n  }];\n\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 4\n    }\n  }, \"midwit IQ Test\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"header-image\",\n    src: \"https://i.imgur.com/iKlQSzg.jpeg\",\n    alt: \"midwit meme\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 4\n    }\n  }), !currentAccount && renderNotConnectedContainer(), currentAccount && renderQuizForm(), /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Inter&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 6\n    }\n  }, `built by @${TWITTER_HANDLE}`)));\n}","map":{"version":3,"sources":["/Users/matt/Desktop/crypto/midwit/midwit-app/src/App.js"],"names":["contractAbi","React","useEffect","useState","ethers","tld","CONTRACT_ADDRESS","App","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","currentAccount","setCurrentAccount","domain","setDomain","record","setRecord","TWITTER_HANDLE","TWITTER_LINK","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","checkIfWalletIsConnected","length","account","mintDomain","price","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","register","value","utils","parseEther","receipt","wait","status","hash","renderNotConnectedContainer","renderInputForm","e","target","renderQuizForm","questions","questionText","answerOptions","map","answerOption","index","handleAnswerButtonClick","isCorrect","answerText","nextQuestion","twitterLogo"],"mappings":"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","sourcesContent":["import contractAbi from './utils/contractABI.json';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport {ethers} from \"ethers\";\nconst tld = '.sexy';\nconst CONTRACT_ADDRESS = '0x2aB26C7664e64211a325b56C19FEE91e0d4e0001';\n\nexport default function App() {\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [score, setScore] = useState(0);\n\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [domain, setDomain] = useState('');\n\tconst [record, setRecord] = useState('');\n\tconst TWITTER_HANDLE = 'matt_brc';\n\tconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\t// Implement your connectWallet method here\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get MetaMask -> https://metamask.io/\");\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t  \t// Fancy method to request access to account.\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\t\t\n\t\t  \t// Boom! This should print out public address once we authorize Metamask.\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\t// Gotta make sure this is async.\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\t\tif (!ethereum) {\n\t\t\tconsole.log(\"Make sure you have MetaMask!\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t}\n\n\t\t// Check if we're authorized to access the user's wallet\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\t// Users can have multiple authorized accounts, we grab the first one if its there!\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t}\n\n\tconst mintDomain = async () => {\n\t\t// Don't run if the domain is empty\n\t\tif (!domain) { return }\n\t\t// Alert the user if the domain is too short\n\t\tif (domain.length < 0) {\n\t\t\talert('Domain must be at least 3 characters long');\n\t\t\treturn;\n\t\t}\n\t\t// Calculate price based on length of domain (change this to match your contract)\t\n\t\t// 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\t\tconst price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n\t\tconsole.log(\"Minting domain\", domain, \"with price\", price);\n\t\ttry {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\t\n\t\t\t\tconsole.log(\"Going to pop wallet now to pay gas...\")\n\t\t\tlet tx = await contract.register(domain, {value: ethers.utils.parseEther(price)});\n\t\t  // Wait for the transaction to be mined\n\t\t\t\tconst receipt = await tx.wait();\n\t\n\t\t\t\t// Check if the transaction was successfully completed\n\t\t\t\tif (receipt.status === 1) {\n\t\t\t\t\tconsole.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t\t\t\t\n\t\t\t\t\t// Set the record for the domain\n\t\t\t\t\ttx = await contract.setRecord(domain, record);\n\t\t\t\t\tawait tx.wait();\n\t\n\t\t\t\t\tconsole.log(\"Record set! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t\t\t\t\n\t\t\t\t\tsetRecord('');\n\t\t\t\t\tsetDomain('');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(\"Transaction failed! Please try again\");\n\t\t\t\t}\n\t\t}\n\t}\n\t\tcatch(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t// Render Methods\n\tconst renderNotConnectedContainer = () => (\n\t\t<div className=\"connect-wallet-container\">\n\t\t\t<img src=\"https://media.giphy.com/media/l4Jz3a8jO92crUlWM/giphy.gif\" alt=\"salt gif\" />\n\t\t  {/* Call the connectWallet function we just wrote when the button is clicked */}\n\t\t\t<button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n\t\t\tConnect Wallet\n\t\t\t</button>\n\t\t</div>\n\t);\n\n\t// Form to enter domain name and data\n\tconst renderInputForm = () => {\n\t\treturn (\n\t\t\t<div className=\"form-container\">\n\t\t\t\t<div className=\"first-row\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={score}\n\t\t\t\t\t\tplaceholder='domain'\n\t\t\t\t\t\tonChange={e => setDomain(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<p className='tld'> {tld} </p>\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={domain}\n\t\t\t\t\tplaceholder='whats ur ninja power'\n\t\t\t\t\tonChange={e => setRecord(e.target.value)}\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<button className='cta-button mint-button' onClick={mintDomain}>\n\t\t\t\t\t\tMint\n\t\t\t\t\t</button>  \n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst renderQuizForm = () => {\n\t\treturn (\n\t\t\t<div className='app'>\n\t\t\t\t{showScore ? (\n\t\t\t\t\t<div className='score-section'>You scored {(score / questions.length) * 100}%</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t\t<span>Question {currentQuestion+ 1}</span>/{questions.length}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption, index) => (\n\t\t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<button className='cta-button mint-button' onClick={mintDomain}>\n\t\t\t\t\t\tMint\n\t\t\t\t\t</button>  \n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\t  // This runs our function when the page loads.\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, [])\n\n\tconst questions = [\n\t\t{\n\t\t\tquestionText: 'A TV is made to ___ to you?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'talk', isCorrect: false },\n\t\t\t\t{ answerText: 'befriend', isCorrect: false },\n\t\t\t\t{ answerText: 'entertain', isCorrect: true },\n\t\t\t\t{ answerText: 'fall in love with', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is the color yellow?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Yellow', isCorrect: true },\n\t\t\t\t{ answerText: 'Duck', isCorrect: false },\n\t\t\t\t{ answerText: 'Apple', isCorrect: false },\n\t\t\t\t{ answerText: 'Blue', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is 2 x 2 + 2?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Elephant', isCorrect: false },\n\t\t\t\t{ answerText: '6', isCorrect: true },\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\n\t\t\t\t{ answerText: '4', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Do you know where you live?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Yes', isCorrect: true },\n\t\t\t\t{ answerText: 'No', isCorrect: false },\n\t\t\t\t{ answerText: 'I play football', isCorrect: false },\n\t\t\t\t{ answerText: 'Unicorns exist', isCorrect: false },\n\t\t\t],\n\t\t},\n\t];\n\n\tconst handleAnswerButtonClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap\" rel=\"stylesheet\"></link>\n\t\t\t<h1>midwit IQ Test</h1>\n\t\t\t<img className='header-image' src=\"https://i.imgur.com/iKlQSzg.jpeg\" alt=\"midwit meme\" />\n\n\t\t\t{/* Hide the connect button if currentAccount isn't empty*/}\n\t\t\t{!currentAccount && renderNotConnectedContainer()}\n\t\t\t{/* Render the input form if an account is connected */}\n\t\t\t{currentAccount && renderQuizForm()}\n\n\t\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter&display=swap\" rel=\"stylesheet\"></link>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built by @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}