{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Desktop/crypto/midwit/midwit-app/src/App.js\";\nimport contractAbi from './utils/contractABI.json';\nimport { questions } from './constants.js';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nconst CONTRACT_ADDRESS = '0xCcD6A269C72471b885e55B209AE9795687dEb1D7';\nexport default function App() {\n  // stateful variables\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentAccount, setCurrentAccount] = useState(''); // set twitter constants\n\n  const TWITTER_HANDLE = 'matt_brc';\n  const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // Implement connectWallet method\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account);\n    } else {\n      console.log('No authorized account found');\n    }\n  };\n\n  const mintNFT = async () => {\n    // set price\n    const price = '0.1';\n    console.log(\"You scored:\", score, \"out of 20\", \"with price\", price);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(score.toString(), score, {\n          value: ethers.utils.parseEther(price)\n        }); // Wait for the transaction to be mined\n\n        const receipt = await tx.wait(); // Check if the transaction was successfully completed\n\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"connect-wallet-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"header-image\",\n    src: \"https://i.imgur.com/iKlQSzg.jpeg\",\n    alt: \"midwit meme\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"cta-button mint-button\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 6\n    }\n  }, \"Connect Wallet\"))));\n\n  const renderQuizForm = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 4\n      }\n    }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"score-section score-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }\n    }, \"You scored \", score / questions.length * 100, \"%\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 53\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 8\n      }\n    }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleAnswerButtonClick(answerOption.isCorrect),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, answerOption.answerText)))));\n  };\n\n  const renderMintButton = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button mint-button\",\n      onClick: mintNFT,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 6\n      }\n    }, \"Mint\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button opensea-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./assets/polygonlogo.png\",\n      alt: \"polygon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://testnets.opensea.io/account\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, \"See On Opensea\"))));\n  }; // This runs our function when the page loads.\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, \"midwit IQ Test\")), !currentAccount && renderNotConnectedContainer(), currentAccount && renderQuizForm(), showScore && renderMintButton(), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Inter&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 6\n    }\n  }, `built by @${TWITTER_HANDLE}`))));\n}","map":{"version":3,"sources":["/Users/matt/Desktop/crypto/midwit/midwit-app/src/App.js"],"names":["contractAbi","questions","React","useEffect","useState","ethers","CONTRACT_ADDRESS","App","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","currentAccount","setCurrentAccount","TWITTER_HANDLE","TWITTER_LINK","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","checkIfWalletIsConnected","length","account","mintNFT","price","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","register","toString","value","utils","parseEther","receipt","wait","status","hash","renderNotConnectedContainer","renderQuizForm","questionText","answerOptions","map","answerOption","index","handleAnswerButtonClick","isCorrect","answerText","renderMintButton","nextQuestion","twitterLogo"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAAQC,MAAR,QAAqB,QAArB;AACA,MAAMC,gBAAgB,GAAG,4CAAzB;AAGA,eAAe,SAASC,GAAT,GAAe;AAE7B;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD,CAN6B,CAQ7B;;AACA,QAAMY,cAAc,GAAG,UAAvB;AACA,QAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D,CAV6B,CAY7B;;AACA,QAAME,aAAa,GAAG,YAAY;AACjC,QAAI;AACH,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACdE,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACA;AACA;;AAED,YAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,QAAQ,CAAC,CAAD,CAAjC;AACAP,MAAAA,iBAAiB,CAACO,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACA,KAZD,CAYE,OAAOK,KAAP,EAAc;AACfF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA;AACD,GAhBD;;AAkBA,QAAMC,wBAAwB,GAAG,YAAY;AAC5C,UAAM;AAAET,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAI,CAACD,QAAL,EAAe;AACdM,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA;AACA,KAHD,MAGO;AACND,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CP,QAA3C;AACA;;AAED,UAAMG,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;;AAEA,QAAIF,QAAQ,CAACO,MAAT,KAAoB,CAAxB,EAA2B;AAC1B,YAAMC,OAAO,GAAGR,QAAQ,CAAC,CAAD,CAAxB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CI,OAA5C;AACAf,MAAAA,iBAAiB,CAACe,OAAD,CAAjB;AACA,KAJD,MAIO;AACNL,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACD,GAlBD;;AAoBA,QAAMK,OAAO,GAAG,YAAY;AAC3B;AACA,UAAMC,KAAK,GAAG,KAAd;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bd,KAA3B,EAAkC,WAAlC,EAA+C,YAA/C,EAA6DoB,KAA7D;;AACA,QAAI;AACJ,YAAM;AAAEb,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAID,QAAJ,EAAc;AACb,cAAMc,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkChB,QAAlC,CAAjB;AACA,cAAMiB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,QAAX,CAAoBjC,gBAApB,EAAsCN,WAAW,CAACwC,GAAlD,EAAuDJ,MAAvD,CAAjB;AAEAX,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,YAAIe,EAAE,GAAG,MAAMH,QAAQ,CAACI,QAAT,CAAkB9B,KAAK,CAAC+B,QAAN,EAAlB,EAAoC/B,KAApC,EAA2C;AAACgC,UAAAA,KAAK,EAAEvC,MAAM,CAACwC,KAAP,CAAaC,UAAb,CAAwBd,KAAxB;AAAR,SAA3C,CAAf,CANa,CAOZ;;AACA,cAAMe,OAAO,GAAG,MAAMN,EAAE,CAACO,IAAH,EAAtB,CARY,CAUZ;;AACA,YAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACzBxB,UAAAA,OAAO,CAACC,GAAR,CAAY,sDAAoDe,EAAE,CAACS,IAAnE;AACA,SAFD,MAGK;AACJ7B,UAAAA,KAAK,CAAC,sCAAD,CAAL;AACA;AACF;AACD,KApBA,CAqBA,OAAMM,KAAN,EAAY;AACXF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA;AACD,GA5BD,CAnD6B,CAiF7B;;;AACA,QAAMwB,2BAA2B,GAAG,mBACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,GAAG,EAAC,kCAAlC;AAAqE,IAAA,GAAG,EAAC,aAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAGC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAQ,IAAA,SAAS,EAAC,wBAAlB;AAA2C,IAAA,OAAO,EAAEjC,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,CAHD,CADD,CADD;;AAcA,QAAMkC,cAAc,GAAG,MAAM;AAC5B,wBACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE1C,SAAS,gBACT;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACcE,KAAK,GAAGX,SAAS,CAAC4B,MAAnB,GAA6B,GAD1C,oBAC+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD/C,CADS,gBAKT,uDACC;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBrB,eAAe,GAAE,CAAjC,CADD,OAC6CP,SAAS,CAAC4B,MADvD,CADD,eAIC;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC5B,SAAS,CAACO,eAAD,CAAT,CAA2B6C,YAA3D,CAJD,CADD,eAOC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEpD,SAAS,CAACO,eAAD,CAAT,CAA2B8C,aAA3B,CAAyCC,GAAzC,CAA6C,CAACC,YAAD,EAAeC,KAAf,kBAC7C;AAAQ,MAAA,OAAO,EAAE,MAAMC,uBAAuB,CAACF,YAAY,CAACG,SAAd,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyEH,YAAY,CAACI,UAAtF,CADA,CADF,CAPD,CANF,CADD;AAuBA,GAxBD;;AA0BA,QAAMC,gBAAgB,GAAG,MAAM;AAC9B,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,SAAS,EAAC,wBAAlB;AAA2C,MAAA,OAAO,EAAE9B,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CADD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA8C;AAAK,MAAA,GAAG,EAAC,0BAAT;AAAoC,MAAA,GAAG,EAAC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9C,eACC;AAAG,MAAA,IAAI,EAAC,qCAAR;AAA8C,MAAA,MAAM,EAAC,QAArD;AAA8D,MAAA,GAAG,EAAC,qBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADD,CADD,CAND,CADD;AAeA,GAhBD,CA1H6B,CA4I3B;;;AACF5B,EAAAA,SAAS,CAAC,MAAM;AACfyB,IAAAA,wBAAwB;AACxB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAM8B,uBAAuB,GAAIC,SAAD,IAAe;AAC9C,QAAIA,SAAJ,EAAe;AACd9C,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA;;AAED,UAAMkD,YAAY,GAAGtD,eAAe,GAAG,CAAvC;;AACA,QAAIsD,YAAY,GAAG7D,SAAS,CAAC4B,MAA7B,EAAqC;AACpCpB,MAAAA,kBAAkB,CAACqD,YAAD,CAAlB;AACA,KAFD,MAEO;AACNnD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACD,GAXD;;AAaA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAM,IAAA,IAAI,EAAC,sEAAX;AAAkF,IAAA,GAAG,EAAC,YAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFD,CADD,EAOE,CAACG,cAAD,IAAmBqC,2BAA2B,EAPhD,EASErC,cAAc,IAAIsC,cAAc,EATlC,EAWE1C,SAAS,IAAImD,gBAAgB,EAX/B,eAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAM,IAAA,IAAI,EAAC,6DAAX;AAAyE,IAAA,GAAG,EAAC,YAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,GAAG,EAAC,cAAT;AAAwB,IAAA,SAAS,EAAC,cAAlC;AAAiD,IAAA,GAAG,EAAEE,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC;AACC,IAAA,SAAS,EAAC,aADX;AAEC,IAAA,IAAI,EAAE9C,YAFP;AAGC,IAAA,MAAM,EAAC,QAHR;AAIC,IAAA,GAAG,EAAC,YAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,aAAYD,cAAe,EAL9B,CAFD,CAFD,CAbD,CADD;AA4BA","sourcesContent":["import contractAbi from './utils/contractABI.json';\nimport { questions } from './constants.js';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport {ethers} from \"ethers\";\nconst CONTRACT_ADDRESS = '0xCcD6A269C72471b885e55B209AE9795687dEb1D7';\n\n\nexport default function App() {\n\n\t// stateful variables\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [score, setScore] = useState(0);\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\n\t// set twitter constants\n\tconst TWITTER_HANDLE = 'matt_brc';\n\tconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\t// Implement connectWallet method\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get MetaMask -> https://metamask.io/\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\t\t\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\t\tif (!ethereum) {\n\t\t\tconsole.log(\"Make sure you have MetaMask!\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t}\n\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t}\n\n\tconst mintNFT = async () => {\n\t\t// set price\n\t\tconst price = '0.1';\n\t\tconsole.log(\"You scored:\", score, \"out of 20\", \"with price\", price);\n\t\ttry {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\t\n\t\t\tconsole.log(\"Going to pop wallet now to pay gas...\")\n\t\t\tlet tx = await contract.register(score.toString(), score, {value: ethers.utils.parseEther(price)});\n\t\t  // Wait for the transaction to be mined\n\t\t\t\tconst receipt = await tx.wait();\n\t\n\t\t\t\t// Check if the transaction was successfully completed\n\t\t\t\tif (receipt.status === 1) {\n\t\t\t\t\tconsole.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(\"Transaction failed! Please try again\");\n\t\t\t\t}\n\t\t}\n\t}\n\t\tcatch(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t// Render Methods\n\tconst renderNotConnectedContainer = () => (\n\t\t<div>\n\t\t\t<div className=\"connect-wallet-container\">\n\t\t\t\t<img className='header-image' src=\"https://i.imgur.com/iKlQSzg.jpeg\" alt=\"midwit meme\" />\n\t\t\t\t{/* Call the connectWallet function we just wrote when the button is clicked */}\n\t\t\t\t<div className='button-container'>\n\t\t\t\t\t<button className=\"cta-button mint-button\" onClick={connectWallet}>\n\t\t\t\t\tConnect Wallet\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderQuizForm = () => {\n\t\treturn (\n\t\t\t<div className='app'>\n\t\t\t\t{showScore ? (\n\t\t\t\t\t<div className='score-section score-text'>\n\t\t\t\t\t\tYou scored {(score / questions.length) * 100}%<br></br>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t\t<span>Question {currentQuestion+ 1}</span>/{questions.length}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption, index) => (\n\t\t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst renderMintButton = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='button-container'>\n\t\t\t\t\t<button className='cta-button mint-button' onClick={mintNFT}>\n\t\t\t\t\t\tMint\n\t\t\t\t\t</button>  \n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className='cta-button opensea-button'><img src=\"./assets/polygonlogo.png\" alt='polygon'/>\n\t\t\t\t\t\t<a href=\"https://testnets.opensea.io/account\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tSee On Opensea</a>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\t  // This runs our function when the page loads.\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, [])\n\n\tconst handleAnswerButtonClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<header>\n\t\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap\" rel=\"stylesheet\"></link>\n\t\t\t\t<h1>midwit IQ Test</h1>\n\t\t\t</header>\n\n\t\t\t{/* Hide the connect button if currentAccount isn't empty*/}\n\t\t\t{!currentAccount && renderNotConnectedContainer()}\n\t\t\t{/* Render the input form if an account is connected */}\n\t\t\t{currentAccount && renderQuizForm()}\n\t\t\t{/* Render the mint button if an account is connected */}\n\t\t\t{showScore && renderMintButton()}\n\n\t\t\t<div>\n\t\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter&display=swap\" rel=\"stylesheet\"></link>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built by @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}