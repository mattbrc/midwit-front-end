{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Desktop/crypto/midwit/midwit-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nexport default function App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentAccount, setCurrentAccount] = useState('');\n  const TWITTER_HANDLE = 'matt_brc';\n  const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // Gotta make sure this is async.\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // Check if we're authorized to access the user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); // Users can have multiple authorized accounts, we grab the first one if its there!\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account);\n    } else {\n      console.log('No authorized account found');\n    }\n  }; // Create a function to render if wallet is not connected yet\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"connect-wallet-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://media.giphy.com/media/l4Jz3a8jO92crUlWM/giphy.gif\",\n    alt: \"Ninja gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }, \"Connect Wallet\")); // This runs our function when the page loads.\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  const questions = [{\n    questionText: 'A TV is made to ___ to you?',\n    answerOptions: [{\n      answerText: 'talk',\n      isCorrect: false\n    }, {\n      answerText: 'befriend',\n      isCorrect: false\n    }, {\n      answerText: 'entertain',\n      isCorrect: true\n    }, {\n      answerText: 'fall in love with',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'What is the color yellow?',\n    answerOptions: [{\n      answerText: 'Yellow',\n      isCorrect: true\n    }, {\n      answerText: 'Duck',\n      isCorrect: false\n    }, {\n      answerText: 'Apple',\n      isCorrect: false\n    }, {\n      answerText: 'Blue',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'What is 2 x 2 + 2?',\n    answerOptions: [{\n      answerText: 'Elephant',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: true\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Do you know where you live?',\n    answerOptions: [{\n      answerText: 'Yes',\n      isCorrect: true\n    }, {\n      answerText: 'No',\n      isCorrect: false\n    }, {\n      answerText: 'I play football',\n      isCorrect: false\n    }, {\n      answerText: 'Unicorns exist',\n      isCorrect: false\n    }]\n  }];\n\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }\n  }, \"midwit IQ Test\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"header-image\",\n    src: \"https://i.imgur.com/iKlQSzg.jpeg\",\n    alt: \"midwit meme\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 6\n    }\n  }, \"You scored \", score / questions.length * 100, \"%\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 8\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnswerButtonClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, answerOption.answerText))))), renderNotConnectedContainer(), /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Inter&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 6\n    }\n  }, `built by @${TWITTER_HANDLE}`)));\n}","map":{"version":3,"sources":["/Users/matt/Desktop/crypto/midwit/midwit-app/src/App.js"],"names":["React","useEffect","useState","App","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","currentAccount","setCurrentAccount","TWITTER_HANDLE","TWITTER_LINK","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","renderNotConnectedContainer","questions","questionText","answerOptions","answerText","isCorrect","handleAnswerButtonClick","nextQuestion","map","answerOption","index","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\n\n\nexport default function App() {\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [score, setScore] = useState(0);\n\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst TWITTER_HANDLE = 'matt_brc';\n\tconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\t// Gotta make sure this is async.\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\t\tif (!ethereum) {\n\t\t\tconsole.log(\"Make sure you have MetaMask!\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t}\n\n\t\t// Check if we're authorized to access the user's wallet\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\t// Users can have multiple authorized accounts, we grab the first one if its there!\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t}\n\n\t// Create a function to render if wallet is not connected yet\n\tconst renderNotConnectedContainer = () => (\n\t\t<div className=\"connect-wallet-container\">\n\t\t\t<img src=\"https://media.giphy.com/media/l4Jz3a8jO92crUlWM/giphy.gif\" alt=\"Ninja gif\" />\n\t\t\t<button className=\"cta-button connect-wallet-button\">\n\t\t\tConnect Wallet\n\t\t\t</button>\n\t\t</div>\n\t);\n\t\n\t  // This runs our function when the page loads.\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, [])\n\n\tconst questions = [\n\t\t{\n\t\t\tquestionText: 'A TV is made to ___ to you?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'talk', isCorrect: false },\n\t\t\t\t{ answerText: 'befriend', isCorrect: false },\n\t\t\t\t{ answerText: 'entertain', isCorrect: true },\n\t\t\t\t{ answerText: 'fall in love with', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is the color yellow?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Yellow', isCorrect: true },\n\t\t\t\t{ answerText: 'Duck', isCorrect: false },\n\t\t\t\t{ answerText: 'Apple', isCorrect: false },\n\t\t\t\t{ answerText: 'Blue', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is 2 x 2 + 2?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Elephant', isCorrect: false },\n\t\t\t\t{ answerText: '6', isCorrect: true },\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\n\t\t\t\t{ answerText: '4', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Do you know where you live?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Yes', isCorrect: true },\n\t\t\t\t{ answerText: 'No', isCorrect: false },\n\t\t\t\t{ answerText: 'I play football', isCorrect: false },\n\t\t\t\t{ answerText: 'Unicorns exist', isCorrect: false },\n\t\t\t],\n\t\t},\n\t];\n\n\tconst handleAnswerButtonClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap\" rel=\"stylesheet\"></link>\n\t\t\t<h1>midwit IQ Test</h1>\n\t\t\t<img className='header-image' src=\"https://i.imgur.com/iKlQSzg.jpeg\" alt=\"midwit meme\" />\n\t\t\t<div className='app'>\n\t\t\t\t{showScore ? (\n\t\t\t\t\t<div className='score-section'>You scored {(score / questions.length) * 100}%</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t\t<span>Question {currentQuestion+ 1}</span>/{questions.length}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption, index) => (\n\t\t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{renderNotConnectedContainer()}\n\n\t\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter&display=swap\" rel=\"stylesheet\"></link>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built by @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}